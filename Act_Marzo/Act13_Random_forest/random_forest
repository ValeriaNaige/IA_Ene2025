import pandas as pd
import numpy as np
from sklearn import linear_model
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import seaborn as sb
from sklearn.ensemble import RandomForestClassifier

#lectura de archivo
dataframe = pd.read_csv("usuarios_win_mac_lin.csv")

'''print(dataframe.head())
print("")
print(dataframe.describe())
print(dataframe.groupby('clase').size())

dataframe.drop(['clase'],axis=1).hist()
plt.show()

sb.pairplot(dataframe.dropna(), hue='clase',height=4,vars=["duracion", "paginas","acciones","valor"],kind='reg')
plt.show()
'''

X = np.array(dataframe.drop(['clase'],axis=1))
y = np.array(dataframe['clase'])
#print(X.shape)

#modelo de regresion logistica
'''model = linear_model.LogisticRegression()
model.fit(X,y)
predictions = model.predict(X)
print(predictions[:5])

print("Model score: ", model.score(X,y))

validation_size=0.20
seed=7
X_train,X_validation, Y_train,Y_validation=model_selection.train_test_split(X,y,test_size=validation_size,random_state=seed)

name='LogisticRegression'
kfold=model_selection.KFold(n_splits=10,shuffle=True)
cv_results=model_selection.cross_val_score(model,X_train,Y_train,cv=kfold,scoring='accuracy')
msg="%s:%f(%f)"%(name,cv_results.mean(),cv_results.std())
print(msg)

predictions=model.predict(X_validation)
print("Accuracy score: ", accuracy_score(Y_validation,predictions))
print("Matriz de confusión: ")
print(confusion_matrix(Y_validation,predictions))
print("Reporte de clasificación")
print(classification_report(Y_validation, predictions))

X_new = pd.DataFrame({'duracion': [10], 'paginas': [3], 'acciones': [5], 'valor': [9]})
print("Clase estimada: ", model.predict(X_new))'''
validation_size=0.20
seed=7
X_train,X_validation, Y_train,Y_validation=model_selection.train_test_split(X,y,test_size=validation_size,random_state=seed)

#modelo random forest
#Crear el modelo con 100 arboles
model = RandomForestClassifier(
    n_estimators=100,
    bootstrap = True, verbose=2,
    max_features = 'sqrt')
# a entrenar!
model.fit(X_train, Y_train)
 
predictions=model.predict(X_validation)
print("Reporte de clasificación")
print(classification_report(Y_validation, predictions))